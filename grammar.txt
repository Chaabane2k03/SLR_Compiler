<programme> ::= PROGRAM <identifier> ';' <bloc> '.'

<bloc> ::= VAR <declaration_variable> BEGIN <instructions> END

<instructions> ::= <instruction> ';' <instructions> | ε

<declaration_variable> ::= <identifier> ':' <type> ';' <declaration_variable> | ε

<instruction> ::= <assignation> | <condition> | <boucle> | <procedure> | <fonction> 

<assignation> ::= <identifier> ':=' <expression>

<condition> ::= IF <expression> THEN <instructions> | IF <expression> THEN <instructions> ELSE <instructions>

<boucle> ::= WHILE <expression> DO <instructions> | FOR <identifier> ':=' <expression> TO <expression> DO <instructions>

<procedure> ::= PROCEDURE <identifier> ';' <bloc> END ';'

<fonction> ::= FUNCTION <identifier> ':' <type> ';' <bloc> END ';'

<expression> ::= INTEGER | <identifier> | <expression_arithmetique> | <expression_logique>

<expression_arithmetique> ::= <expression> OPARTH <expression> | INTEGER

<expression_logique> ::= <expression> OPLOG <expression> | 'NOT' <expression>

<type> ::= INTEGER | REAL | BOOLEAN

<identifier> ::=  ID 
<OPRAL> ::= + | - | * | /
<OPLOG> ::= AND | OR


PR ::= PROGRAM ID ';' B '.'
B ::= VAR D BEGIN I END
I ::= A ';' I | ε
D ::= ID ':' T ';' D | ε
A ::= ID ':=' Ex
C ::= IF Ex THEN I | IF Ex THEN I ELSE I
L ::= WHILE Ex DO I | FOR ID ':=' Ex TO Ex DO I
P ::= PROCEDURE ID ';' B END ';'
F ::= FUNCTION ID ':' T ';' B END ';'
Ex ::= INTEGER | ID | EA | EL
EA ::= Ex OPARTH Ex | INTEGER
EL ::= Ex OPLOG Ex | 'NOT' Ex
T ::= INTEGER | REAL | BOOLEAN
ID ::= IDENT




------------------------------------------------------------------------------------------
SLR : 
-> Grammaire augmentée











