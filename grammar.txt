statements  : statement NEWLINE statements
            | statement

statement   : KEYWORD:return expr
            | KEYWORD:continue
            | KEYWORD:break
            | expr

expr        : KEYWORD:var IDENTIFIER EQ expr
            | comp-expr logical-expr-extension

logical-expr-extension : KEYWORD:and comp-expr logical-expr-extension
                       | KEYWORD:or comp-expr logical-expr-extension
                       | ε

comp-expr   : not comp-expr
            | arith-expr comparison-extension

comparison-extension : EE arith-expr comparison-extension
                     | LT arith-expr comparison-extension
                     | GT arith-expr comparison-extension
                     | LTE arith-expr comparison-extension
                     | GTE arith-expr comparison-extension
                     | ε

arith-expr  : term arithmetic-extension

arithmetic-extension : PLUS term arithmetic-extension
                     | MINUS term arithmetic-extension
                     | ε

term        : factor multiplicative-extension

multiplicative-extension : MUL factor multiplicative-extension
                         | DIV factor multiplicative-extension
                         | ε

factor      : PLUS factor 
            | MINUS factor
            | power

power       : call exponentiation-extension

exponentiation-extension : POW factor exponentiation-extension
                         | ε

call        : atom function-call-extension

function-call-extension : LPAREN expr argument-list-extension RPAREN
                        | ε

argument-list-extension : COMMA expr argument-list-extension
                        | ε

atom        : INT
            | FLOAT
            | STRING
            | IDENTIFIER
            | LPAREN expr RPAREN
            | list-expr
            | if-expr
            | for-expr
            | while-expr
            | func-def

list-expr   : LSQUARE list-elements RSQUARE

list-elements : expr list-elements-continuation
              | ε

list-elements-continuation : COMMA expr list-elements-continuation
                           | ε

if-expr     : KEYWORD:if expr KEYWORD:then statement if-expr-b if-expr-c
            | NEWLINE statements KEYWORD:end if-expr-b if-expr-c

if-expr-b   : KEYWORD:elseif expr KEYWORD:then statement if-expr-b if-expr-c
            | NEWLINE statements KEYWORD:end if-expr-b if-expr-c
            | ε

if-expr-c   : KEYWORD:else statement
            | NEWLINE statements KEYWORD:end
            | ε

for-expr    : KEYWORD:for IDENTIFIER EQ expr KEYWORD:to expr KEYWORD:step expr KEYWORD:do statement
            | KEYWORD:for IDENTIFIER EQ expr KEYWORD:to expr KEYWORD:do statement
            | NEWLINE statements KEYWORD:end

while-expr  : KEYWORD:while expr KEYWORD:do statement
            | NEWLINE statements KEYWORD:end

func-def    : KEYWORD:function IDENTIFIER LPAREN func-def-params RPAREN ARROW expr
            | KEYWORD:function LPAREN func-def-params RPAREN ARROW expr
            | NEWLINE statements KEYWORD:end

func-def-params : IDENTIFIER additional-params
                | ε

additional-params : COMMA IDENTIFIER additional-params
                  | ε
