<programme> ::= PROGRAM <identifier> ';' <bloc> '.'

<bloc> ::= VAR <declaration_variable> BEGIN <instructions> END

<instructions> ::= <instruction> ';' <instructions> | ε

<declaration_variable> ::= <identifier> ':' <type> ';' <declaration_variable> | ε

<instruction> ::= <assignation> | <condition> | <boucle> | <procedure> | <fonction> 

<assignation> ::= <identifier> ':=' <expression>

<condition> ::= IF <expression> THEN <instructions> | IF <expression> THEN <instructions> ELSE <instructions>

<boucle> ::= WHILE <expression> DO <instructions> | FOR <identifier> ':=' <expression> TO <expression> DO <instructions>

<procedure> ::= PROCEDURE <identifier> ';' <bloc> END ';'

<fonction> ::= FUNCTION <identifier> ':' <type> ';' <bloc> END ';'

<expression> ::= INTEGER | <identifier> | <expression_arithmetique> | <expression_logique>

<expression_arithmetique> ::= <expression> OPARTH <expression> | INTEGER

<expression_logique> ::= <expression> OPLOG <expression> | 'NOT' <expression>

<type> ::= INTEGER | REAL | BOOLEAN

<identifier> ::=  ID 
<OPRAL> ::= + | - | * | /
<OPLOG> ::= AND | OR




FIRST(<programme>) = { PROGRAM }
FIRST(<bloc>) = { VAR }
FIRST(<instructions>) = { ε , <identifier> , IF , WHILE , FOR , PROCEDURE , FUNCTION}
FIRST(<declaration_variable>) = { <identifier> , ε }
FIRST(<instruction>) = { <identifier> , IF , WHILE , FOR , PROCEDURE , FONCTION }
FIRST(<assignation>) = {<identifier>}
FIRST(<condition>) = { IF }
FIRST(<boucle>) = { WHILE, FOR }
FIRST(<procedure>) = { PROCEDURE }
FIRST(<fonction>) = { FUNCTION }
FIRST(<expression>) = { INTEGER , <identifier>  }
FIRST(<expression_arithmetique>) = { INTEGER , <identifier> }
FIRST(<expression_logique>) = { INTEGER , <identifier> , NOT}
FIRST(<type>) = { INTEGER , REAL , BOOLEAN }
FIRST(<identifier>) = { ID }

-----------------------------------------------------------------
FOLLOW(<programme>) = { $ }
FOLLOW(<bloc>) = { . , END }
FOLLOW(<instructions>) = { END , ELSE , ; }
FOLLOW(<declaration_variable>) = { BEGIN }
FOLLOW(<instruction>) = { ; }
FOLLOW(<assignation>) = { ; }
FOLLOW(<condition>) = { ; }
FOLLOW(<boucle>) = { ; }
FOLLOW(<procedure>) = { ; }
FOLLOW(<fonction>) = { ; }
FOLLOW(<expression>) = { ; , THEN , TO , DO , OPARTH, OPLOG}
FOLLOW(<expression_arithmetique>) = { ; , THEN , TO , DO ,OPARTH , OPLOG }
FOLLOW(<expression_logique>) = { ; , THEN , TO , DO , OPARTH , OPLOG}
FOLLOW(<type>) = {;}
FOLLOW(<identifier>) = {; , : , := , ; , THEN , TO , DO , OPARTH, OPLOG }
-----------------------------------------------------------------
